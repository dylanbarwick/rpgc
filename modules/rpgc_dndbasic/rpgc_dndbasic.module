<?php

/**
 * @file
 * Contains rpgc_dndbasic.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function rpgc_dndbasic_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the rpgc_dndbasic module.
    case 'help.page.rpgc_dndbasic':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('D&amp;D Basic character creation') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function rpgc_dndbasic_theme() {
  return [
    'rpgc_dndbasic' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function rpgc_dndbasic_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'rpgc_entity_rpgc_dndbasic_add_form') {

    $rpgc_create = Drupal::service('rpgc_dndbasic.creation');
    $systemconfig = $rpgc_create->getSystemConfig();

    $pc = $rpgc_create->generatePc();

    // Option to clear.
    $form['option_to_clear'] = [
      '#type' => 'markup',
      '#markup' => t('Clear all fields and make up a character from scratch.'),
      '#weight' => -20,
      '#prefix' => '<div class="option-to-clear">',
      '#suffix' => '</div>',
    ];

    // Name.
    $form['name']['widget'][0]['value']['#default_value'] = $pc['name'];
    $name_gen = Link::createFromRoute(
      t('Get another name'),
      'rpgc_dndbasic.ajax_generate_name',
      [
        'nojs' => 'ajax',
        'race' => $pc['details']['class']['race'],
        'malefemale' => $pc['sex'],
      ],
      ['attributes' => ['class' => 'use-ajax']])
      ->toString();
    $form['name']['#suffix'] = $name_gen;

    // Stats.
    $defaultdice = $systemconfig['defaultdicedetails'];
    foreach ($systemconfig['statistics'] as $key => $value) {
      $form['field_' . $key]['widget'][0]['value']['#default_value'] = $pc['details']['full_stat'][$key]['sum'];
      $form['field_' . $key]['widget'][0]['value']['#description'] .= $pc['details']['full_stat'][$key]['message'];
      $rollfor = Link::createFromRoute(
        t('Roll for `@statlabel` again...', ['@statlabel' => $form['field_' . $key]['widget'][0]['value']['#title']]),
        'rpgc_dndbasic.ajax_roll_stat',
        ['nojs' => 'ajax', 'whichstat' => $key],
        ['attributes' => ['class' => 'use-ajax']])
        ->toString();
      $form['field_' . $key]['#suffix'] = $rollfor;
    }

    // Alignment.
    $form['field_rpgc_dndbasic_align']['widget']['#default_value'] = $pc['alignment'];

    // Sex.
    $form['sex']['widget'][0]['value']['#default_value'] = $pc['sex'];

    // Class.
    $form['class']['widget'][0]['value']['#default_value'] = $pc['class'];

    // Class description.
    $form['class']['widget'][0]['value']['#description'] .= $pc['details']['classDescAdd'];

    // Race.
    $form['race']['widget'][0]['value']['#default_value'] = $pc['details']['class']['race'];

    // Hit points.
    $form['field_rpgc_dndbasic_hp']['widget'][0]['value']['#default_value'] = $pc['hitpoints'];

  }
  $forms_to_add_to = [
    'rpgc_entity_rpgc_dndbasic_edit_form',
    'rpgc_entity_rpgc_dndbasic_add_form',
  ];
  if (in_array($form_id, $forms_to_add_to)) {
    $form['#attached']['library'][] = 'rpgc_dndbasic/rpgc_dndbasic-library';
  }

  // dump($form);
}

/**
 * Compare function to sort stats by weight.
 */
function cmp($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }
  return ($a['weight'] > $b['weight']) ? -1 : 1;
}

/**
 * Implements hook_preprocess_page().
 */
function rpgc_dndbasic_preprocess_page(&$variables) {
  // Provide information about the currently loaded page / Entity
  // Default (and for non-entity pages):
  // Null on system pages.
  $variables['entity_type'] = NULL;
  $variables['bundle'] = NULL;
  $variables['entity'] = NULL;
  if ($entity = _get_current_controller_entity()) {
    $variables['entity_type'] = $entity->getEntityTypeId();
    $variables['bundle'] = $entity->bundle();
    $variables['entity'] = $entity;
  }
  if ($variables['bundle'] == 'rpgc_dndbasic') {
    $variables['#attached']['library'][] = 'rpgc_dndbasic/rpgc_dndbasic-library';
  }
}

/**
 * Helper function to return the currently loaded entity from the URL.
 *
 * Returns NULL if the currently loaded page is no entity.
 *
 * @return \Drupal\Core\Entity\EntityInterface
 *   Returns an entity interface.
 */
function _get_current_controller_entity() {
  $currentRouteParameters = \Drupal::routeMatch()->getParameters();
  foreach ($currentRouteParameters as $param) {
    if ($param instanceof EntityInterface) {
      $entity = $param;
      return $entity;
    }
  }
  return NULL;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function rpgc_dndbasic_preprocess_field__rpgc_entity__rpgc_dndbasic(&$variables) {

  // Add classes to other fields.
  if (strpos($variables['field_name'], 'field_rpgc_dndbasic_') === 0) {
    $variables['attributes']['class'] = [
      'dndbasic-field',
      'rpgc-entity-field',
    ];
    $variables['title_attributes']['class'][] = 'field-title';
    $variables['content_attributes']['class'][] = 'field-content';
  }

  // Add classes to entity type fields (name, class, race etc).
  if (in_array($variables['field_name'], ['race', 'sex', 'class', 'history'])) {
    $variables['attributes']['class'] = [
      'dndbasic-field',
      'rpgc-entity-field-' . $variables['field_name'],
    ];
    $variables['title_attributes']['class'][] = 'field-title';
    $variables['content_attributes']['class'][] = 'field-content';
  }

  // Add classes to stats.
  if (strpos($variables['field_name'], '_stat_')) {
    $variables['attributes']['class'][] = 'statistic';
    $variables['title_attributes']['class'][] = 'stat-title';
    $variables['content_attributes']['class'][] = 'stat-content';
  }

}
