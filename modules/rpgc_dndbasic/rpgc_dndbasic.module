<?php

/**
 * @file
 * Contains rpgc_dndbasic.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

// Define the code for this game system as a constant.
define('RPGC_DNDBASIC_GAME_SYSTEM', 'dndbasic');

/**
 * Implements hook_help().
 */
function rpgc_dndbasic_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the rpgc_dndbasic module.
    case 'help.page.rpgc_dndbasic':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('D&amp;D Basic character creation') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function rpgc_dndbasic_theme() {
  return [
    'rpgc_dndbasic' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function rpgc_dndbasic_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'rpgc_entity_rpgc_dndbasic_add_form') {

    $rpgc_create = Drupal::service('rpgc_dndbasic.creation');
    $systemconfig = $rpgc_create->getSystemConfig();

    // Stats.
    $defaultdice = $systemconfig['defaultdicedetails'];
    foreach ($systemconfig['statistics'] as $key => $value) {
      $rollo = $rpgc_create->rollStat($defaultdice);
      $form['field_' . $key]['widget'][0]['value']['#default_value'] = $rollo['sum'];
      $form['field_' . $key]['widget'][0]['value']['#description'] .= $rollo['message'];

      // Save for later when we do min reqs.
      $stats[$key] = $rollo['sum'];
    }

    // Alignment.
    $which_align = array_rand($systemconfig['alignment']);
    $form['field_rpgc_dndbasic_align']['widget']['#default_value'] = $which_align;

    // Sex.
    $which_sex = array_rand($systemconfig['sex']);
    $form['sex']['widget'][0]['value']['#default_value'] = $systemconfig['sex'][$which_sex];

    // Class.
    // Get a full list of classes.
    $classes = $systemconfig['classes'];

    // Next, we start disqualifying based on rolled stats and min reqs.
    $rpgc_create->disqualifyClasses($classes, $stats);

    // Isolate all stats that are 13 or above and assign weights to them.
    $primereqs = $rpgc_create->getPrimeReqs($stats);

    // Step through the remaining classes and assign weights.
    $rpgc_create->assignWeightsToClasses($classes, $primereqs);

    // Narrow down the contenders.
    $contenders = $rpgc_create->narrowDownTheContenders($classes);
    // If there are no contenders, ignore the contender_keys thing.
    if (isset($contenders['contender_keys'])) {
      $contender_keys = $contenders['contender_keys'];
      unset($contenders['contender_keys']);
    }

    if (count($contenders) === 0) {
      $chosen_class = array_rand($classes);
    }
    else {
      $chosen_key = array_rand($contender_keys);
      $chosen_class = $contender_keys[$chosen_key];
    }

    $form['class']['widget'][0]['value']['#default_value'] = $classes[$chosen_class]['label'];

    // Get description addendum.
    $desc = $rpgc_create->getClassDescriptionAddendum($contenders);

    $form['class']['widget'][0]['value']['#description'] .= $desc;

    $form['race']['widget'][0]['value']['#default_value'] = $classes[$chosen_class]['race'];
    $hitpoints = $rpgc_create->hitPoints($classes[$chosen_class], $stats['rpgc_dndbasic_stat_con'], $defaultdice);

    $form['field_rpgc_dndbasic_hp']['widget'][0]['value']['#default_value'] = $hitpoints['sum'];
  }
}

/**
 * Compare function to sort stats by weight.
 */
function cmp($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }
  return ($a['weight'] > $b['weight']) ? -1 : 1;
}
